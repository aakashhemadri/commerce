{"version":3,"sources":["components/NavBar.js","components/ProductCard.js","components/ProductsListPage.js","App.js","registerServiceWorker.js","index.js"],"names":["NavBar","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","ProductCard","Card","id","CardImg","top","width","src","imageUrl","alt","CardBody","CardTitle","tag","name","CardSubtitle","price","CardText","description","Button","ProductsListPage","state","data","fetch","then","response","json","setState","product_cards","this","map","product","index","Col","Row","sm","React","Component","ProductPage","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.42cc8f6d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\n\nconst NavBar = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Walmart</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/account/\">Account</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Cart\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  Product 1\n                </DropdownItem>\n                <DropdownItem>\n                  Product 2\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Clear Cart\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n          <NavbarText>Username</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button\n} from 'reactstrap';\n\nconst ProductCard = (props) => {\n  return (\n    <Card>\n      <a href={\"/product/\" + props.id}>\n\t\t\t\t<CardImg top width=\"100%\" src={props.imageUrl} alt=\"Product Image\" />\n      </a>\n      <CardBody>\n        <a href={\"/product/\" + props.id}>\n          <CardTitle tag=\"h5\">{props.name}</CardTitle>\n        </a>\n        <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">{\"$\" + props.price}</CardSubtitle>\n        <CardText>{props.description}</CardText>\n        <Button>Add to Cart</Button>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ProductCard;\n","import React from 'react';\nimport { Row, Col } from 'reactstrap';\n\nimport NavBar from './NavBar.js';\nimport ProductCard from './ProductCard.js';\n\nclass ProductsListPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        \"name\": \"Loading\",\n        \"price\": \"Loading\",\n        \"description\": \"Loading\",\n        \"imageURL\": \"Loading\"\n      }],\n    }\n  }\n\n  componentDidMount() {\n    fetch('/api/product/list')\n      .then(response => response.json())\n      .then(json => this.setState({ data: json }));\n  }\n\n  render() {\n    var product_cards = this.state.data.map(function(product, index) {\n    return (\n       <Col>\n          <ProductCard id = {product[\"_id\"]}\n            name = {product[\"name\"]}\n            price = {product[\"price\"]}\n            description = {product[\"description\"]}\n            imageUrl = {product[\"imageURL\"]}\n  \t      />\n        </Col>\n        );\n     });\n\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <Row sm=\"4\">\n          {product_cards}\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ProductsListPage;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport ProductsListPage from './components/ProductsListPage.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route path=\"/product-list\">\n              <ProductsListPage />\n            </Route>\n            <Route path=\"/product\">\n              <ProductPage />\n            </Route>\n            <Route path=\"/\">\n              <ProductsListPage />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction ProductPage() {\n  return (\n    <p>product page</p>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}